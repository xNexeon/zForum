{"version":3,"sources":["Config/Fire.js","Components/Login.js","Components/Register.js","Components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Login","React","Component","props","login","bind","handleChange","signup","state","email","password","e","this","setState","target","name","value","preventDefault","auth","signInWithEmailAndPassword","then","u","catch","error","console","log","window","alert","createUserWithEmailAndPassword","className","htmlFor","onChange","type","id","aria-describedby","placeholder","onClick","style","marginLeft","Home","signOut","class","logout","App","user","authListener","onAuthStateChanged","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wRAciBA,E,OADFC,EAASC,cAXT,CACXC,OAAQ,0CACRC,WAAY,+BACZC,YAAa,sCACbC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iB,gBCuDJC,G,YC3DGC,IAAMC,U,YDCtB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,EAAKA,MAAMC,KAAX,gBACb,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,OAAS,EAAKA,OAAOF,KAAZ,gBACd,EAAKG,MAAQ,CACXC,MAAO,GACPC,SAAU,IAPK,E,0EAWNC,GACXC,KAAKC,SAAL,eAAiBF,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,U,4BAGtCL,GACJA,EAAEM,iBACF5B,EAAK6B,OAAOC,2BAA2BP,KAAKJ,MAAMC,MAAOG,KAAKJ,MAAME,UAAUU,MAAK,SAACC,OACjFC,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZG,OAAOC,MAAM,4C,6BAIZhB,GACLA,EAAEM,iBACF5B,EAAK6B,OAAOU,+BAA+BhB,KAAKJ,MAAMC,MAAOG,KAAKJ,MAAME,UAAUU,MAAK,SAACC,OACrFD,MAAK,SAACC,GAAKG,QAAQC,IAAIJ,MACzBC,OAAM,SAACC,GACJC,QAAQC,IAAIF,GACZG,OAAOC,MAAM,2D,+BAIjB,OACG,yBAAKE,UAAU,mBACX,kDACA,yDACX,yBAAKA,UAAU,UACT,8BACE,yBAAKA,UAAU,cACb,2BAAOC,QAAQ,sBAAqB,kDACpC,2BAAOd,MAAOJ,KAAKJ,MAAMC,MAAOsB,SAAUnB,KAAKN,aAAc0B,KAAK,QAAQjB,KAAK,QAAQc,UAAU,eAAeI,GAAG,qBAAqBC,mBAAiB,YAAYC,YAAY,iBAEnL,yBAAKN,UAAU,cACZ,2BAAOC,QAAQ,yBAAwB,6CACvC,2BAAOd,MAAOJ,KAAKJ,MAAME,SAAUqB,SAAUnB,KAAKN,aAAc0B,KAAK,WAAWjB,KAAK,WAAWc,UAAU,eAAeI,GAAG,wBAAwBE,YAAY,cAEhK,4BAAQH,KAAK,SAASI,QAASxB,KAAKR,MAAOyB,UAAU,mBAArD,SACA,4BAAQO,QAASxB,KAAKL,OAAQ8B,MAAO,CAACC,WAAY,QAAST,UAAU,0BAArE,mB,GAlDS3B,cEiBLqC,E,iLAfPlD,EAAK6B,OAAOsB,Y,+BAIhB,OACE,6BACE,wBAAIC,MAAM,cAAV,qBAEI,4BAAQL,QAASxB,KAAK8B,OAAQb,UAAU,wBAAxC,gB,GAXO5B,IAAMC,WCmCVyC,E,YA9Bb,WAAYxC,GAAO,IAAD,8BAChB,4CAAMA,KACDK,MAAQ,CACXoC,KAAK,IAHS,E,iFAQhBhC,KAAKiC,iB,qCAGS,IAAD,OACbxD,EAAK6B,OAAO4B,oBAAmB,SAACF,GAC1BA,EACF,EAAK/B,SAAS,CAAE+B,SAEhB,EAAK/B,SAAS,CAAE+B,KAAM,Y,+BAM1B,OACE,6BACEhC,KAAKJ,MAAMoC,KAAQ,kBAAC,EAAD,MAAa,kBAAC,EAAD,W,GA1BtB3C,IAAMC,WCIJ6C,QACW,cAA7BrB,OAAOsB,SAASC,UAEe,UAA7BvB,OAAOsB,SAASC,UAEhBvB,OAAOsB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdrC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMqC,c","file":"static/js/main.53977f3e.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nconst config = {\n    apiKey: \"AIzaSyBlwrNHIZ2UJpXdpcLOHy_8XcEDWfCZCnA\",\n    authDomain: \"zforum-e3bc5.firebaseapp.com\",\n    databaseURL: \"https://zforum-e3bc5.firebaseio.com\",\n    projectId: \"zforum-e3bc5\",\n    storageBucket: \"zforum-e3bc5.appspot.com\",\n    messagingSenderId: \"776846395492\",\n    appId: \"1:776846395492:web:40f248ee2700248bf13771\",\n    measurementId: \"G-HK8QB3TVEQ\"\n  };\n\n  const Fire = firebase.initializeApp(config);\n  export default Fire;","import React, { Component } from 'react';\nimport Fire from '../Config/Fire';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../Config/myStyle.css'\nimport Register from './Register'\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.login = this.login.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.signup = this.signup.bind(this);\n    this.state = {\n      email: '',\n      password: ''\n    };\n  }\n\n  handleChange(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  login(e) {\n    e.preventDefault();\n    Fire.auth().signInWithEmailAndPassword(this.state.email, this.state.password).then((u)=>{\n    }).catch((error) => {\n        console.log(error);\n        window.alert(\"Your email or password is incorrect\");\n      });\n  }\n\n  signup(e){\n    e.preventDefault();\n    Fire.auth().createUserWithEmailAndPassword(this.state.email, this.state.password).then((u)=>{\n    }).then((u)=>{console.log(u)})\n    .catch((error) => {\n        console.log(error);\n        window.alert('Invalid entry or this email is already registered!')\n      })\n  }\n  render() {\n    return (\n       <div className=\"col-md-6 center\">\n           <h1>Welcome to zForum!</h1>\n           <h4>Please Log in or Register</h4>\n<div className=\"bmodel\">\n      <form>\n        <div className=\"form-group\">\n          <label htmlFor=\"exampleInputEmail1\"><strong>Email address</strong></label>\n          <input value={this.state.email} onChange={this.handleChange} type=\"email\" name=\"email\" className=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\" />\n        </div>\n        <div className=\"form-group\">\n           <label htmlFor=\"exampleInputPassword1\"><strong>Password</strong></label>\n           <input value={this.state.password} onChange={this.handleChange} type=\"password\" name=\"password\" className=\"form-control\" id=\"exampleInputPassword1\" placeholder=\"Password\" />\n        </div>\n           <button type=\"submit\" onClick={this.login} className=\"btn btn-success\">Login</button>\n           <button onClick={this.signup} style={{marginLeft: '25px'}} className=\"btn btn-success fright\">Register</button>\n      </form>\n \n</div>\n</div>\n\n    );\n  }\n}\nexport default Login;","import React from 'react';\nimport Fire from '../Config/Fire';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../Config/myStyle.css'\n\n\nclass App extends React.Component{\n  render() {\n    return(\n      <div>\n        \n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport Fire from '../Config/Fire'\nimport Register from '../Components/Register'\nimport '../Config/myStyle.css'\n\nclass Home extends React.Component{\n\n    logout(){\n        Fire.auth().signOut();\n    }\n\n  render() {\n    return(\n      <div>\n        <h1 class=\"centertext\">\n            Welcome to zForum!\n            <button onClick={this.logout} className=\"btn btn-light fright\">Logout</button>\n        </h1>\n      </div>\n    )\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport Fire from './Config/Fire';\nimport Login from './Components/Login';\nimport Home from './Components/Home';\nimport Register from './Components/Register'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\n\nclass App extends React.Component{\n\n  constructor(props){\n    super(props);\n    this.state = {\n      user:{},\n    }\n  }\n\n  componentDidMount(){\n    this.authListener();\n  }\n\n  authListener() {\n    Fire.auth().onAuthStateChanged((user) => {\n      if (user) {\n        this.setState({ user });\n      } else {\n        this.setState({ user: null });\n      }\n    });\n  }\n\n  render() {\n    return(\n      <div>\n       {this.state.user ? (<Home />) : (<Login />)}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}